(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{669:function(t,s,a){"use strict";a.r(s);var e=a(17),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"写法扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#写法扩展"}},[t._v("#")]),t._v(" 写法扩展")]),t._v(" "),a("h2",{attrs:{id:"属性简洁表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性简洁表示法"}},[t._v("#")]),t._v(" 属性简洁表示法")]),t._v(" "),a("p",[t._v("在ES6中可以使用简写属性，使用属性简洁表示法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cxy"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("name\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上面代码等同于")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cxy"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("也就是说我们可以省略属性值，这种简洁法只适用于属性名和变量名相同的情况")]),t._v(" "),a("h2",{attrs:{id:"属性名表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性名表达式"}},[t._v("#")]),t._v(" 属性名表达式")]),t._v(" "),a("p",[t._v("声明对象属性的方法有两种，一种是直接使用标识符声明")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"猪痞恶霸"')]),t._v("\n")])])]),a("p",[t._v("第二种可以使用表达式作为属性名来定义，需要使用"),a("code",[t._v("[]")]),t._v("括起表达式")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fzf404"')]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fzf404")]),t._v("\n")])])]),a("p",[t._v("又或者提前声明表达式，在"),a("code",[t._v("[]")]),t._v("填入变量")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ned"')]),t._v("\n")])])]),a("h1",{attrs:{id:"属性与方法扩展"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性与方法扩展"}},[t._v("#")]),t._v(" 属性与方法扩展")]),t._v(" "),a("h2",{attrs:{id:"方法的name属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法的name属性"}},[t._v("#")]),t._v(" 方法的name属性")]),t._v(" "),a("p",[t._v("可以通过方法的"),a("code",[t._v("name")]),t._v("属性来拿到对象的方法名")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("say")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("say"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如果对象使用了"),a("code",[t._v("set")]),t._v("与"),a("code",[t._v("get")]),t._v("，那么方法的"),a("code",[t._v("name")]),t._v("属性是在对象的"),a("code",[t._v("set")]),t._v("与"),a("code",[t._v("get")]),t._v("方法上的，且返回值为"),a("code",[t._v("set")]),t._v("或者"),a("code",[t._v("get")]),t._v("+方法名")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" des "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fn'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'get fn'")]),t._v("\n")])])]),a("h2",{attrs:{id:"同值相等方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同值相等方法"}},[t._v("#")]),t._v(" 同值相等方法")]),t._v(" "),a("p",[a("code",[t._v("Object.is()")]),t._v("可以比较两个值是否严格相等，有些像"),a("code",[t._v("===")]),t._v("但是还是有一些区别")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("p",[t._v("这个方法与"),a("code",[t._v("===")]),t._v("的区别之一，他可以对"),a("code",[t._v("NaN")]),t._v("进行一个正常的判断")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h1",{attrs:{id:"对象合并"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象合并"}},[t._v("#")]),t._v(" 对象合并")]),t._v(" "),a("p",[t._v("我下面将列举对象合并的三种方法，分别为"),a("code",[t._v("Object.assign()")]),t._v("，"),a("code",[t._v("扩展运算符")]),t._v("与"),a("code",[t._v("_.defaultesDeep")]),t._v("，并对"),a("code",[t._v("Object.assign()")]),t._v("进行重点介绍")]),t._v(" "),a("h2",{attrs:{id:"object-assign"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-assign"}},[t._v("#")]),t._v(" Object.assign()")]),t._v(" "),a("p",[t._v("下面围绕"),a("strong",[t._v("使用")]),t._v("与"),a("strong",[t._v("三个关键性问题")]),t._v("来带读者掌握"),a("code",[t._v("Object.assign()")])]),t._v(" "),a("h3",{attrs:{id:"使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),a("p",[a("code",[t._v("Object.assign()")]),t._v("可以将要"),a("strong",[t._v("被合并的对象")]),t._v("的所有"),a("strong",[t._v("可枚举属性")]),t._v("浅拷贝到"),a("strong",[t._v("合并目标对象")]),t._v("，这里简单解释一下"),a("strong",[t._v("可枚举属性")]),t._v("：可以被"),a("code",[t._v("for…in")]),t._v("遍历得到的属性为可枚举属性")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" header "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"猪痞恶霸"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" body "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("header"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {name: '猪痞恶霸', age: 20}")]),t._v("\n")])])]),a("p",[t._v("我声明了"),a("code",[t._v("header")]),t._v("与"),a("code",[t._v("body")]),t._v("作为被合并的对象，再声明一个要合并的目标对象，通过"),a("code",[t._v("Object.assign()")]),t._v("合并得到最终的合并对象")]),t._v(" "),a("h3",{attrs:{id:"合并冲突问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并冲突问题"}},[t._v("#")]),t._v(" 合并冲突问题")]),t._v(" "),a("p",[t._v("那么肯定有这么一种情况，我们的"),a("strong",[t._v("被合并对象")]),t._v("之间或者与"),a("strong",[t._v("合并目标对象")]),t._v("之间存在相同的属性，这种情况得到的结果是怎么样的")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ned "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ned"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hogskin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"猪痞恶霸"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fzf404"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ned"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("hogskin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {name: '猪痞恶霸'}")]),t._v("\n")])])]),a("p",[t._v("我声明了三个相同的对象，以"),a("code",[t._v("person")]),t._v("为目标，最后得到的结果为"),a("code",[t._v("{name: '猪痞恶霸'}")]),t._v("，所以说如果合并的对象中存在同名属性，则后面的属性会覆盖前面的属性，这里就是"),a("code",[t._v("hogskin")]),t._v("对象的"),a("code",[t._v("name")]),t._v("属性")]),t._v(" "),a("h3",{attrs:{id:"浅拷贝问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝问题"}},[t._v("#")]),t._v(" 浅拷贝问题")]),t._v(" "),a("p",[a("code",[t._v("Object.assign()")]),t._v("是一个"),a("strong",[t._v("浅拷贝方法")]),t._v("，同俗解释一下在这个场景的"),a("strong",[t._v("浅拷贝")]),t._v("问题，合并对象的时候，如果"),a("strong",[t._v("被合并对象")]),t._v("的属性有引用类型即"),a("strong",[t._v("对象")]),t._v("或者"),a("strong",[t._v("数组")]),t._v("，在合并后就会出现一个问题，合并后对象的引用类型属性会随着被合并对象的"),a("strong",[t._v("引用类型")]),t._v("属性的改变而改变。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" bun "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("info")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"战场小包"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"未知"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("bun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// info: {name: '战场小包', age: '未知'}")]),t._v("\nbun"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ned"')]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// info: {name: 'Ned', age: '未知'}")]),t._v("\n")])])]),a("p",[t._v("如上，我们声明"),a("code",[t._v("bun")]),t._v("对象内有一个对象属性"),a("code",[t._v("info")]),t._v("，当"),a("code",[t._v("bun.info.name")]),t._v("改变其属性值，我们合并的对象内的属性值也随着改变，这就是浅拷贝问题，因为浅拷贝针对于引用类型，复制的是其引用地址，地址对应的空间内是可以改变的。")]),t._v(" "),a("h3",{attrs:{id:"参数问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数问题"}},[t._v("#")]),t._v(" 参数问题")]),t._v(" "),a("p",[t._v("关于参数有两个问题，一个问题是当只有一个参数的时候会返回什么")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {}")]),t._v("\n")])])]),a("p",[t._v("如果参数只有一个的情况下，其会返回原参数，如上我声明一个空对象，传入"),a("code",[t._v("Object.assign()")]),t._v("中返回"),a("code",[t._v("obj")]),t._v("即"),a("code",[t._v("{}")])]),t._v(" "),a("p",[t._v("还有一个问题就是当只传入一个参数，且传入参数不是对象的情况，会发生什么")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Number {4}")]),t._v("\n")])])]),a("p",[t._v("这种情况，那么就会将传入的参数转换为对象的形式，我传入了一个数值4，那么就返回了一个对象"),a("code",[t._v("Number {4}")])]),t._v(" "),a("p",[t._v("那么如果参数转换不成对象，比如"),a("code",[t._v("undefined")]),t._v("又或者"),a("code",[t._v("null")]),t._v("，那么就会出现错误")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Cannot convert undefined or null to object")]),t._v("\n")])])]),a("p",[t._v("报错也很直观明了："),a("code",[t._v("Cannot convert undefined or null to object")]),t._v("，如果不可被转换成对象的"),a("code",[t._v("undefined")]),t._v("与"),a("code",[t._v("null")]),t._v("或者其他非对象作为参数出现在非首位，那么就会将这些参数跳过，不会被合并到目标对象中，当然也不会出现错误情况")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("404")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"猪痞恶霸"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {name: '猪痞恶霸'}")]),t._v("\n")])])]),a("p",[t._v("上面的结果就是将"),a("code",[t._v("str")]),t._v("参数跳过，合并"),a("code",[t._v("person")]),t._v("对象")]),t._v(" "),a("p",[t._v("这个时候应该联想到一个类型，那就是字符串，它比较特殊，可以被转换为类数组对象并合并进目标对象内")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"猪痞恶霸"')]),t._v(" \nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {0: '猪', 1: '痞', 2: '恶', 3: '霸'}")]),t._v("\n")])])]),a("p",[t._v("我们看到结果就是一个非常典型的类数组对象，键值为数字。")]),t._v(" "),a("p",[a("code",[t._v("Object.assign()")]),t._v("就学习到这里，我们下面来看看另外两个合并对象的方法")]),t._v(" "),a("h2",{attrs:{id:"扩展运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符"}},[t._v("#")]),t._v(" 扩展运算符")]),t._v(" "),a("p",[t._v("对象的扩展运算符可以用来合并对象，使用"),a("code",[t._v("{...a,...b}")]),t._v("的形式来合并")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" head "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fzf404"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" body "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("head"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {age: 20, name: 'fzf404'}")]),t._v("\n")])])]),a("p",[t._v("上面的"),a("code",[t._v("let obj = {...body,...head}")]),t._v("也等同于"),a("code",[t._v("Object.assign(obj,body,head)")])]),t._v(" "),a("h2",{attrs:{id:"第三方库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三方库"}},[t._v("#")]),t._v(" 第三方库")]),t._v(" "),a("p",[t._v("第三方库中有很多对象合并的方法，可以解决很多问题，下面我将介绍"),a("code",[t._v("lodash")]),t._v("库中的"),a("code",[t._v("assign()")]),t._v("，"),a("code",[t._v("merge()")]),t._v("与"),a("code",[t._v("defaultesDeep")]),t._v("，相关例子大家可以去官方文档查询：["),a("a",{attrs:{href:"https://www.lodashjs.com/docs/lodash.defaultsDeep",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),a("OutboundLink")],1),t._v("](https://www.lodashjs.com/docs/lodash.assign)")]),t._v(" "),a("h3",{attrs:{id:"assign"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assign"}},[t._v("#")]),t._v(" assign()")]),t._v(" "),a("p",[a("code",[t._v("assign()")]),t._v("与"),a("code",[t._v("Object.assign()")]),t._v("是相同的，这里不再赘述，主要来看"),a("code",[t._v("merge()")]),t._v("，"),a("code",[t._v("defaults")]),t._v("与"),a("code",[t._v("defaultesDeep()")])]),t._v(" "),a("h3",{attrs:{id:"merge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[t._v("#")]),t._v(" merge()")]),t._v(" "),a("p",[a("code",[t._v("merge()")]),t._v("和"),a("code",[t._v("assign()")]),t._v("最大的不同是它合并是靠递归遍历对象属性，所以"),a("code",[t._v("merge()")]),t._v("可以"),a("strong",[t._v("深拷贝")]),t._v("合并对象，也就是说引用类型的改变不会影响到合并得到得对象。")]),t._v(" "),a("h3",{attrs:{id:"defaults"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defaults"}},[t._v("#")]),t._v(" defaults()")]),t._v(" "),a("p",[a("code",[t._v("defaults()")]),t._v("和"),a("code",[t._v("assign()")]),t._v("相似，只不过在参数合并冲突的解决方式上有区别，前面的属性不为undefined且与后面属性名相同，后面的对象属性会被忽略")]),t._v(" "),a("h3",{attrs:{id:"defaultsdeep"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defaultsdeep"}},[t._v("#")]),t._v(" defaultsDeep()")]),t._v(" "),a("p",[a("code",[t._v("defaultsDeep()")]),t._v("方法与"),a("code",[t._v("defaults()")]),t._v("对应，唯一区别是其是递归遍历，所以可以"),a("strong",[t._v("深拷贝")]),t._v("合并对象")]),t._v(" "),a("h2",{attrs:{id:"最后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[t._v("#")]),t._v(" 最后")]),t._v(" "),a("p",[t._v("数一数，我了解的大概也就6种方法，其中掌握"),a("strong",[t._v("深拷贝")]),t._v("和"),a("strong",[t._v("浅拷贝")]),t._v("合并，以及"),a("code",[t._v("Object.assign()")]),t._v("的使用细节就可以了，我们常常会遇到对象合并的需求，而合并中也经常会遇到浅拷贝和深拷贝问题，而我们常常需要深拷贝，这个时候可以使用第三方库或者自己封装一个深拷贝合并函数也可以。")]),t._v(" "),a("h1",{attrs:{id:"遍历对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历对象"}},[t._v("#")]),t._v(" 遍历对象")]),t._v(" "),a("p",[t._v("我根据阮老师的《ES6标准入门》学习并总结了七种遍历对象的方法，我会将分别介绍这七种方法并进行详细的区分，并将从"),a("strong",[t._v("属性可枚举性")]),t._v("问题与"),a("strong",[t._v("遍历方法")]),t._v("两个大方面讲述全文，其中可枚举性是掌握遍历对象之前的的铺垫，请读者耐心学习，掌握遍历对象的七种方法！")]),t._v(" "),a("h2",{attrs:{id:"属性的可枚举性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性的可枚举性"}},[t._v("#")]),t._v(" 属性的可枚举性")]),t._v(" "),a("p",[t._v("为什么要先说属性的可枚举性问题，因为一些方法会根据属性的可枚举型进行操作，其中"),a("strong",[t._v("遍历")]),t._v("就是一种，遍历的一些方法会忽略掉可枚举属性值为"),a("code",[t._v("false")]),t._v("的属性，我知道到这里读者可能会有一些绕圈子：什么叫"),a("strong",[t._v("可枚举属性值为"),a("code",[t._v("false")]),t._v("的属性")]),t._v("？下面我带大家来一探究竟")]),t._v(" "),a("p",[t._v("对象中的所有属性都具有一个描述对象，对你没有看错，其实在我们看到的一个普通对象中的每一个属性值都包含一对象，即描述对象，它是用来控制属性的行为")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"猪痞恶霸"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("比如上面声明了一个普通的对象，含有"),a("code",[t._v("name")]),t._v("与"),a("code",[t._v("age")]),t._v("属性，这两个属性都具有一个描述对象，那我们怎么能拿到这个描述对象呢？")]),t._v(" "),a("p",[t._v("来看看这个方法："),a("code",[t._v("Object.getOwnPropertyDescriptor()")]),t._v("，它可以拿到指定对象的某属性的描述对象，所以参数有两个，一个是指定对象，一共是指定对象的某属性")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hogB/Img/main/202208071533975.png",alt:"image-20220807153329873"}})]),t._v(" "),a("p",[t._v("如上图，我们拿到了"),a("code",[t._v("obj")]),t._v("对象"),a("code",[t._v("name")]),t._v("属性的描述对象，描述对象内就包含了我们想知道的东西，"),a("code",[t._v("enumerable")]),t._v("就是描述对象可枚举属性，那么在这个例子中值为"),a("code",[t._v("true")]),t._v("，所以就能解释上面那句看不懂的话："),a("strong",[t._v("可枚举属性值为"),a("code",[t._v("false")]),t._v("的属性")]),t._v("，在这里的解释就为："),a("code",[t._v("obj")]),t._v("对象内的"),a("code",[t._v("name")]),t._v("属性的描述对象内的可枚举属性值为"),a("code",[t._v("true")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"遍历对象-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历对象-2"}},[t._v("#")]),t._v(" 遍历对象")]),t._v(" "),a("h3",{attrs:{id:"for-in"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-in"}},[t._v("#")]),t._v(" for...in")]),t._v(" "),a("p",[a("code",[t._v("for...in")]),t._v("可以遍历对象的所有可枚举属性，包括对象本身的和对象继承来的属性")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ned"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("like")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"man"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'age'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"18"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("enumerable")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hogB/Img/main/202208071607923.png",alt:"image-20220807160702884"}})]),t._v(" "),a("p",[t._v("看一看上面的例子，我们使用"),a("code",[t._v("Object.defineProperty")]),t._v("的形式来设置对象的描述对象，将其可枚举属性值设为"),a("code",[t._v("false")]),t._v("，使用"),a("code",[t._v("for...in")]),t._v("遍历，其没有被打印出来")]),t._v(" "),a("p",[t._v("其实"),a("code",[t._v("for...in")]),t._v("的特性会导致一个问题，其继承的属性会被遍历到，所以当我们不想要遍历被继承的属性，那么我们就可以使用"),a("code",[t._v("Object.keys()")])]),t._v(" "),a("h3",{attrs:{id:"object-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-keys"}},[t._v("#")]),t._v(" Object.keys()")]),t._v(" "),a("p",[a("code",[t._v("Object.leys()")]),t._v("方法可以遍历到所有对象本身的可枚举属性，但是其返回值为数组")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ned"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("like")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"man"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("keys")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  ['name', 'like']")]),t._v("\n")])])]),a("p",[t._v("到这里我们一般是使用"),a("code",[t._v("Object.keys()")]),t._v("来代替"),a("code",[t._v("for...in")]),t._v("遍历操作，除此之外，为了代替"),a("code",[t._v("for...in")]),t._v("，又新增了与"),a("code",[t._v("Object.keys()")]),t._v("配套的遍历方法，下面我们来看看")]),t._v(" "),a("h3",{attrs:{id:"object-values"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-values"}},[t._v("#")]),t._v(" Object.values()")]),t._v(" "),a("p",[a("code",[t._v("Object.values()")]),t._v("与"),a("code",[t._v("Object.keys()")]),t._v("遍历对象的特性是相同的，但是其返回的结构是以遍历的属性值构成的数组")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cornd"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['cornd', 10]")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'like'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"coding"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("enumerable")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['cornd', 10] ")]),t._v("\n")])])]),a("p",[t._v("声明了一个对象，使用"),a("code",[t._v("Object.values()")]),t._v("返回对象的所有自身可枚举属性的属性值，通过设置新的属性值并将其描述对象内的"),a("code",[t._v("enumerable")]),t._v("设置为"),a("code",[t._v("false")]),t._v("，就可以看到"),a("code",[t._v("Object.values()")]),t._v("的特性")]),t._v(" "),a("h3",{attrs:{id:"object-entries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-entries"}},[t._v("#")]),t._v(" Object.entries()")]),t._v(" "),a("p",[a("code",[t._v("Object.entries()")]),t._v("的返回值为"),a("code",[t._v("Object.values()")]),t._v("与"),a("code",[t._v("Object.keys()")]),t._v("的结合，也就是说它会返回一个嵌套数组，数组内包括了属性名与属性值")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cornd"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [['name', 'cornd'],['age', 10]]")]),t._v("\n")])])]),a("p",[t._v("其遍历特性与"),a("code",[t._v("Object.values()")]),t._v("和"),a("code",[t._v("Object.keys()")]),t._v("相同，不再赘述。")]),t._v(" "),a("h3",{attrs:{id:"object-getownpropertynames"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertynames"}},[t._v("#")]),t._v(" Object.getOwnPropertyNames()")]),t._v(" "),a("p",[t._v("其返回结果与"),a("code",[t._v("Object.keys()")]),t._v("对应，但是他得特性与其相反，会返回对象得所有属性，包括了不可枚举属性")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyNames")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['length']")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"length"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("enumerable "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("p",[t._v("上面我声明了一个空数组，而使用"),a("code",[t._v("Object.getOwnPropertyNames()")]),t._v("方法，返回了"),a("code",[t._v("length")]),t._v("，而length属性的"),a("code",[t._v("enumerable")]),t._v("正是"),a("code",[t._v("false")])]),t._v(" "),a("h3",{attrs:{id:"object-getownpropertysymbols"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertysymbols"}},[t._v("#")]),t._v(" Object.getOwnPropertySymbols()")]),t._v(" "),a("p",[a("code",[t._v("Object.getOwnPropertySymbols()")]),t._v("会返回对象内的所有"),a("code",[t._v("Symbol")]),t._v("属性，返回形式依旧是数组，值得注意的是，在对象初始化的时候，内部是不会包含任何"),a("code",[t._v("Symbol")]),t._v("属性")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"obj"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertySymbols")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// []")]),t._v("\n")])])]),a("p",[t._v("所以我初始化一个对象，通过这个方法返回的是一个空数组")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sym "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sym"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sym"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hogskin"')]),t._v(" \nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertySymbols")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Symbol()")]),t._v("\n")])])]),a("p",[t._v("我在后面新建"),a("code",[t._v("symbol")]),t._v("，再为上面声明好的对象添加进去，通过遍历得到"),a("code",[t._v("Symbol()")])]),t._v(" "),a("h3",{attrs:{id:"reflect-ownkeys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reflect-ownkeys"}},[t._v("#")]),t._v(" Reflect.ownKeys()")]),t._v(" "),a("p",[a("code",[t._v("Reflect.ownKeys()")]),t._v("返回的是一个大杂烩数组，即包含了对象的所有属性，无论是否可枚举还是属性是symbol，还是继承，将所有的属性返回")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("31")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nReflect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ownKeys")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['0', '1', '2', 'length']")]),t._v("\n")])])]),a("p",[t._v("上面的例子声明了一个数组，返回的是数组下标和"),a("code",[t._v("length")]),t._v("属性。")]),t._v(" "),a("h2",{attrs:{id:"区分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区分"}},[t._v("#")]),t._v(" 区分")]),t._v(" "),a("p",[t._v("为了跟好的记忆理解并掌握这七种方法，我根据遍历目标，返回形式，遍历值三个维度将七种方法区分起来。")]),t._v(" "),a("h3",{attrs:{id:"根据遍历目标区分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#根据遍历目标区分"}},[t._v("#")]),t._v(" 根据遍历目标区分")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("遍历目标")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("遍历对象本身的"),a("strong",[t._v("可枚举")]),t._v("属性不包含"),a("strong",[t._v("继承")]),t._v("来的属性（不包括"),a("code",[t._v("Symbol()")]),t._v("）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("Object.keys()")]),t._v("，"),a("code",[t._v("Object.values()")]),t._v("，"),a("code",[t._v("Object.entries()")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("遍历对象本身的"),a("strong",[t._v("可枚举")]),t._v("属性包括"),a("strong",[t._v("继承")]),t._v("来的属性（不包括"),a("code",[t._v("Symbol()")]),t._v("）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("for...in")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("遍历对象本身的所有属性（不包括"),a("code",[t._v("Symbol()")]),t._v("）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("Object.getOwnPropertyNames()")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("遍历对象的"),a("code",[t._v("Symbol()")]),t._v("属性")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("Object.getOwnPropertySymbols()")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("遍历对象的所有属性")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("Reflect.ownKeys()")])])])])]),t._v(" "),a("h3",{attrs:{id:"根据返回值区分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#根据返回值区分"}},[t._v("#")]),t._v(" 根据返回值区分")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("返回值")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("返回数组")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("``Object.keys()"),a("code",[t._v("，")]),t._v("Object.values()"),a("code",[t._v("，")]),t._v("Object.entries()"),a("code",[t._v("，")]),t._v("Object.getOwnPropertyNames()"),a("code",[t._v("，")]),t._v("Object.getOwnPropertySymbols()"),a("code",[t._v("，")]),t._v("Reflect.ownKeys()`")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("不返回值")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("for...in")])])])])]),t._v(" "),a("h3",{attrs:{id:"根据遍历值区分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#根据遍历值区分"}},[t._v("#")]),t._v(" 根据遍历值区分")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("遍历值")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("遍历属性")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("Reflect.ownKeys()")]),t._v("，"),a("code",[t._v("Object.getOwnPropertyNames()")]),t._v("，"),a("code",[t._v("Object.keys()")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("遍历属性值")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("Object.getOwnPropertySymbols()")]),t._v("，"),a("code",[t._v("Object.values()")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("遍历全部")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("for...in")]),t._v("，"),a("code",[t._v("Object.entries()")])])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);
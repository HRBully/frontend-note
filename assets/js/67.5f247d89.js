(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{675:function(t,s,a){"use strict";a.r(s);var n=a(17),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"C:%5CUsers%5Chogsk%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221009151440480.png",alt:"image-20221009151440480"}})]),t._v(" "),a("p",[t._v("当我们打印一个对象实例，能发现在属性中有一个"),a("code",[t._v("prototype")]),t._v("，比如上面我们创建了一个空对象，打印并展开，内部有"),a("code",[t._v("[[Prototype]]: Object")]),t._v("，那么他是什么呢？我们百度翻译成中文为："),a("strong",[t._v("原型")]),t._v("，"),a("strong",[t._v("原型")]),t._v("在对象中起到了什么作用，我们能利用他来做什么，下面我将用本文从"),a("strong",[t._v("原型介绍")]),t._v("，"),a("strong",[t._v("原型模式")]),t._v("，"),a("strong",[t._v("原型链")]),t._v("，"),a("strong",[t._v("继承四个方面")]),t._v("来让大家透彻"),a("strong",[t._v("原型")])]),t._v(" "),a("h2",{attrs:{id:"原型⚛️"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型⚛️"}},[t._v("#")]),t._v(" 原型⚛️")]),t._v(" "),a("h3",{attrs:{id:"原型的基本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型的基本"}},[t._v("#")]),t._v(" 原型的基本")]),t._v(" "),a("p",[a("strong",[t._v("原型")]),t._v("可以理解为它通过"),a("code",[t._v("prototype")]),t._v("，"),a("code",[t._v("__proto__")]),t._v("以及"),a("code",[t._v("constructor")]),t._v("建立在"),a("strong",[t._v("构造函数")]),t._v("，"),a("strong",[t._v("实例")]),t._v("，"),a("strong",[t._v("原型对象")]),t._v("之间建立联系")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" coder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" coder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("上面的四行代码证明了"),a("strong",[t._v("构造函数")]),t._v("，"),a("strong",[t._v("实例")]),t._v("，"),a("strong",[t._v("原型对象")]),t._v("之间的联系，分别对应如下")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Person")]),t._v("是构造函数")]),t._v(" "),a("li",[a("code",[t._v("coder")]),t._v("是"),a("code",[t._v("Person")]),t._v("构造的实例")]),t._v(" "),a("li",[a("code",[t._v("Person.prototype")]),t._v("为"),a("code",[t._v("Person")]),t._v("的"),a("code",[t._v("prototype")]),t._v("所指向的对象，称作"),a("strong",[t._v("原型对象")])])]),t._v(" "),a("p",[t._v("我用一张图再细化一下三者的关系：")]),t._v(" "),a("p",[t._v("通过张图我相信大家已经理解了原型的基本概念，那么下面来学习一下原型的一些"),a("strong",[t._v("特性")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"层级特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#层级特性"}},[t._v("#")]),t._v(" 层级特性")]),t._v(" "),a("p",[t._v("原型的"),a("strong",[t._v("层级特性")]),t._v("在访问对象属性的内部机制起到了重要的作用，我们根据下面的代码提出两个问题：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"猪痞恶霸"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ned"')]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20 '猪痞恶霸'")]),t._v("\n")])])]),a("ul",[a("li",[t._v("当我们给"),a("code",[t._v("obj.__proto__.age")]),t._v("赋值，能在"),a("code",[t._v("obj")]),t._v("访问到？")]),t._v(" "),a("li",[t._v("而我们再为"),a("code",[t._v("obj.__proto__.name")]),t._v("赋值，访问的"),a("code",[t._v("name")]),t._v("为什么是实例声明的时候赋的值？")])]),t._v(" "),a("p",[t._v("其实这些都归咎于我们原型的"),a("strong",[t._v("层级特性")]),t._v("，当我们一个对象的属性时是根据层级顺序来搜索的，是由实例，再到原型对象，我将这个顺序绘制了一幅图")]),t._v(" "),a("p",[t._v("上面的例子中为"),a("code",[t._v("obj.__proto__.name")]),t._v("赋值后，访问"),a("code",[t._v("obj")]),t._v("的"),a("code",[t._v("name")]),t._v("，先搜索实例，询问是否有这个属性，答案是有，所以访问的是实例上的"),a("code",[t._v("name")]),t._v("属性，访问"),a("code",[t._v("age")]),t._v("属性的时候，在实例搜索该属性，但是没有，所以会继续搜索原型对象，而原型对象上有"),a("code",[t._v("age")]),t._v("属性，所以被成功访问。")]),t._v(" "),a("p",[t._v("那么到这，可能有同学会问：那么我们怎么知道我们访问的属性是实例上的还是原型对象。其"),a("code",[t._v("javascript")]),t._v("提供了"),a("code",[t._v("hasOwnProperty()")]),t._v("方法提供了这个能力，我们可以通过这个方法来判断访问的属性位置")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("People")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("People")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"猪痞恶霸"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" coder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("People")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("coder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("coder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 猪痞恶霸 false")]),t._v("\ncoder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ned"')]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("coder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("coder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Ned true")]),t._v("\n")])])]),a("p",[t._v("我来为大家解释一下上面程序发生的过程，我们在构造实例之前为原型对象添加"),a("code",[t._v("name")]),t._v("属性，创建"),a("code",[t._v("coder")]),t._v("实例后通过"),a("code",[t._v("hasOwnProperty")]),t._v("方法判断"),a("code",[t._v("name")]),t._v("属性位置，结果为"),a("code",[t._v("false")]),t._v("，说明我们访问的是"),a("strong",[t._v("原型对象")]),t._v("上的属性；当我们为"),a("code",[t._v("coder")]),t._v("实例添加"),a("code",[t._v("name")]),t._v("属性后，再次调用"),a("code",[t._v("hasOwnProperty")]),t._v("，返回值为"),a("code",[t._v("true")]),t._v("，说明我们访问的是"),a("strong",[t._v("实例")]),t._v("上的属性。")]),t._v(" "),a("h3",{attrs:{id:"共享特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享特性"}},[t._v("#")]),t._v(" 共享特性")]),t._v(" "),a("p",[t._v("除了层级特性，原型的"),a("strong",[t._v("共享特性")]),t._v("也给对象实例带来了一些影响，所谓共享特性，就是当两个不同的对象实例具有相同的原型对象的时，两个对象实例会共享原型对象上的属性，所谓"),a("strong",[t._v("共享")]),t._v("即共享的属性的引用也相同。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" coder_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" coder_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attribute "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"猪痞恶霸"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ncoder_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attribute "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" coder_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attribute "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("在上面的例子中，我们为"),a("code",[t._v("Person")]),t._v("添加"),a("code",[t._v("attribute")]),t._v("属性，为其赋予一个引用类型的值，创建两个对象实例，分别为"),a("code",[t._v("coder_1")]),t._v("与"),a("code",[t._v("coder_2")]),t._v("，最后鉴定"),a("code",[t._v("coder_1.attribute === coder_2.attribute")]),t._v("返回"),a("code",[t._v("true")]),t._v("，说明两个对象实例共享的是原型对象上的"),a("code",[t._v("attribute")]),t._v("属性。")]),t._v(" "),a("p",[t._v("然而我们不能把共享特性看得那么好用，两个不同的实例共享一个引用值属性，肯定会造成影响，比如我为"),a("code",[t._v("coder_1")]),t._v("的"),a("code",[t._v("attribute")]),t._v("属性添加属性")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("coder_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attribute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("coder_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attribute"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {name: '猪痞恶霸', age: 20}")]),t._v("\n")])])]),a("p",[t._v("在为"),a("code",[t._v("coder_1")]),t._v("的"),a("code",[t._v("attribute")]),t._v("添加"),a("code",[t._v("age")]),t._v("属性后，由于"),a("strong",[t._v("共享特性")]),a("code",[t._v("coder_2")]),t._v("的"),a("code",[t._v("attribute")]),t._v("属性也随之改变，有时我们不想看到这种结果，那么我们可以直接在对象实例上添加属性。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("coder_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attribute "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ned"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ncoder_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attribute "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Ned"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ncoder_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attribute "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" coder_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attribute "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("p",[t._v("我们手动为两个对象实例添加属性并赋予相同的引用值，而这次的结果是"),a("code",[t._v("false")]),t._v("，因为这次由于原型的"),a("strong",[t._v("层级特性")]),t._v("我们访问到的是每个对象实例各自的属性，所以引用并不相等，通过对比相信大家明白了原型的"),a("strong",[t._v("共享特性")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"动态特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态特性"}},[t._v("#")]),t._v(" 动态特性")]),t._v(" "),a("p",[t._v("仔细看一下在共享实例部分所举的例子，会发现，我们是在创建实例后为原型对象新添加属性的，这么做也会拿到新添加属性，这都是因为在访问对象属性的过程中，搜索值的是"),a("strong",[t._v("动态的")]),t._v("，可以理解为，在实例创建后，它搜索的原型对象的引用是不变的，我们为这个对象添加属性，其引用值不变，所以我们可以拿到新添加的属性，除非我们修改对象实例的"),a("code",[t._v("__proto__")]),t._v("让其改变原型对象。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" coder_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"猪痞恶霸"')]),t._v("\ncoder_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '猪痞恶霸'")]),t._v("\n")])])]),a("p",[t._v("上面是在创建"),a("code",[t._v("coder_1")]),t._v("实例后为原型对象添加属性，最后拿到了"),a("code",[t._v("name")]),t._v("值")]),t._v(" "),a("h3",{attrs:{id:"为原型对象添加属性的正确姿势"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为原型对象添加属性的正确姿势"}},[t._v("#")]),t._v(" 为原型对象添加属性的正确姿势")]),t._v(" "),a("p",[t._v("在上面对于原型的讲解中我们学习了"),a("strong",[t._v("共享特性")]),t._v("即可以通过"),a("code",[t._v("prototype")]),t._v("来为原型对象添加属性，并且对应的每个实例也可以共享到，但是有时我们为原型对象添加属性的姿势不对，就会出现问题，比如：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" coder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'猪痞恶霸'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("code")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'在写代码'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncoder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("code")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// coder.code is not a function")]),t._v("\n")])])]),a("p",[t._v("再调用"),a("code",[t._v("coder.code()")]),t._v("的时候抛出了错误："),a("code",[t._v("coder.code is not a function")]),t._v("，为啥呢？那肯定是我们在这个场景下为原型对象添加属性的"),a("strong",[t._v("姿势不对")]),t._v("，在上面的例子中我们在创建"),a("code",[t._v("coder")]),t._v("实例前"),a("strong",[t._v("重写了")]),t._v("原型对象，所以"),a("code",[t._v("coder")]),t._v("的原型还是"),a("strong",[t._v("最初的原型")]),t._v("，不含"),a("code",[t._v("code")]),t._v("方法，但是"),a("code",[t._v("Person")]),t._v("的原型发生了改变，所以此刻"),a("strong",[t._v("实例与其构造函数所对应的构造函数是不一致的")]),t._v("，而当我们再使用构造函数创建一个对象实例调用"),a("code",[t._v("code")]),t._v("方法会成功。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" coder_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncoder_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("code")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 猪痞恶霸在写代码")]),t._v("\n")])])]),a("p",[t._v("这次正确地执行了"),a("code",[t._v("code")]),t._v("函数，因为"),a("code",[t._v("coder_2")]),t._v("的原型是我们新重写的原型，包含了"),a("code",[t._v("code")]),t._v("方法。")]),t._v(" "),a("p",[t._v("而我们常用的添加属性的正确姿势有两种，需要视情况而定，而第一种我们可以使用"),a("code",[t._v(".")]),t._v("符通过"),a("code",[t._v("prototype")]),t._v("为原型对象添加属性")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" coder "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("code")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'在写代码'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'猪痞恶霸'")]),t._v("\ncoder"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("code")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 猪痞恶霸在写代码")]),t._v("\n")])])]),a("p",[t._v("无关实例的创建位置，只要使用该方法为原型对象添加属性，那么实例就可以访问，但是这种方法比较冗余，我们就需要返回到重写原型对象的场景下")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'猪痞恶霸'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("code")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'在写代码'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("这种需要我们先为原型对象添加"),a("code",[t._v("constructor")]),t._v("指回我们的构造函数，再添加其他属性，但是需要注意的就是不能在重写原型对象前创造实例，否则就会出现"),a("strong",[t._v("实例与构造函数不一致")]),t._v("的现象。")]),t._v(" "),a("p",[t._v("以上就是原型的一些理解性的概念，掌握到这里后，下面讲会深入"),a("strong",[t._v("原型模式")]),t._v("与"),a("strong",[t._v("原型链")]),t._v("，学习原型的具体应用场景。")]),t._v(" "),a("h2",{attrs:{id:"原型模式🙈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型模式🙈"}},[t._v("#")]),t._v(" 原型模式🙈")]),t._v(" "),a("p",[t._v("在我们地印象中创建对象有"),a("strong",[t._v("工厂模式")]),t._v("，"),a("strong",[t._v("构造函数模式")]),t._v("，当然还有"),a("strong",[t._v("原型模式")]),t._v("，而原型模式是通过利用"),a("strong",[t._v("原型")]),t._v("的特性来创建对象的，我们首先需要先创建一个构造函数例如，然后为其"),a("code",[t._v("prototype")]),t._v("添加属性和方法，之后使用构造函数创造实例，而被添加到"),a("code",[t._v("prototype")]),t._v("的属性与方法会被每一个实例共享")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"猪痞恶霸"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" coder_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncoder_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 猪痞恶霸")]),t._v("\n")])])]),a("p",[t._v("到这里大家可能会说：这怎么感觉还是像使用构造函数模式创建对象呢？其实"),a("strong",[t._v("原型模式")]),t._v("与"),a("strong",[t._v("构造函数模式")]),t._v("创建出的对象有很大不同。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构造函数模式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("info "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" coder_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" coder_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("coder_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("coder_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("info "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" coder_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原型模式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("info "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" coder_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" coder_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("coder_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("info "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" coder_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("上面我们使用"),a("strong",[t._v("构造函数模式")]),t._v("与"),a("strong",[t._v("原型模式")]),t._v("分别创建了相同的构造函数及两个实例，分别使用"),a("code",[t._v("this")]),t._v("与"),a("code",[t._v("prototype")]),t._v("添加一个引用类型"),a("code",[t._v("info")]),t._v("，比对两个实例的"),a("code",[t._v("info")]),t._v("，发现"),a("strong",[t._v("构造函数模式")]),t._v("创建的两个实例的"),a("code",[t._v("info")]),t._v("属性不严格相同，而"),a("strong",[t._v("原型模式")]),t._v("创建的两个实例相同，这体现了两个模式构造出的实例不同")]),t._v(" "),a("ul",[a("li",[t._v("构造函数创建的实例是独立的个体")]),t._v(" "),a("li",[t._v("原型模式创建的实例则会共享原型的属性与方法")])]),t._v(" "),a("p",[t._v("其实我们还可以从两者创建对象的过程中体会到这一点，其实两个模式在创建的前三个步骤是相同的")]),t._v(" "),a("ol",[a("li",[t._v("在内存中开辟一个空间存放新的对象(实例)")]),t._v(" "),a("li",[t._v("为该实例添加"),a("code",[t._v("__proto__")]),t._v("属性，将"),a("code",[t._v("__proto__")]),t._v("的值改为构造函数的"),a("code",[t._v("prototype")]),t._v("，也就是将其关联到原型对象上")]),t._v(" "),a("li",[t._v("修改"),a("code",[t._v("this")]),t._v("绑定为新对象")])]),t._v(" "),a("p",[t._v("而在第四步由于模式内构造函数的代码不同，所以也会产生不同")]),t._v(" "),a("ul",[a("li",[t._v("构造模式第四步：执行构造函数内代码也就是"),a("code",[t._v("this.info = {age:20}")]),t._v("，通过为创建的实例添加属性")]),t._v(" "),a("li",[t._v("原型模式第四步：执行构造函数内代码"),a("code",[t._v("Person.prototype.info= {age:20}")]),t._v("为原型对象添加属性")])]),t._v(" "),a("p",[t._v("第四步也决定了两者创建的实例会有所不同，构造函数模式在添加属性的时候每个实例都会添加一次，而原型模式则会直接将属性添加在原型上，让所有实例共享，所以出现了"),a("code",[t._v("coder_1.info === coder_2.info")]),t._v("差异现象")]),t._v(" "),a("h2",{attrs:{id:"原型链⛓️"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链⛓️"}},[t._v("#")]),t._v(" 原型链⛓️")]),t._v(" "),a("blockquote",[a("p",[t._v("原先链是一我们主要应用的继承方式，它是以原型为基本单位构成的一种链式结构")])]),t._v(" "),a("h3",{attrs:{id:"原型相连"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型相连"}},[t._v("#")]),t._v(" 原型相连")]),t._v(" "),a("p",[t._v("在本文开头，我介绍了原型："),a("strong",[t._v("构造函数")]),t._v("，"),a("strong",[t._v("实例")]),t._v("，"),a("strong",[t._v("原型对象")]),t._v("之间通过"),a("code",[t._v("prototype")]),t._v("，"),a("code",[t._v("__proto__")]),t._v("以及"),a("code",[t._v("constructor")]),t._v("建立了联系，而"),a("strong",[t._v("原型链")]),t._v(" 则是将诺干个原型链在一起构成链式结构，其链接是方法是将原型中的"),a("strong",[t._v("原型对象")]),t._v("指向另一个原型中的实例，就形成了一个简单的"),a("strong",[t._v("原型链")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Animal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" animal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" animal\n")])])]),a("p",[t._v("在上面，我们声明"),a("code",[t._v("Animal")]),t._v("与"),a("code",[t._v("Person")]),t._v("构造函数，之后通过修改"),a("code",[t._v("Person.prototype")]),t._v("改为"),a("code",[t._v("animal")]),t._v("实例，使两个原型链在一起，其实这么看对于两个原型的关系并不明显，下面我们为"),a("code",[t._v("Animal")]),t._v("原型添加属性，看看会发生什么")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("animal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"猪痞恶霸"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 猪痞恶霸")]),t._v("\n")])])]),a("p",[t._v("我们为"),a("code",[t._v("animal")]),t._v("实例添加"),a("code",[t._v("name")]),t._v("属性，再通过"),a("code",[t._v("Person")]),t._v("构造函数创建"),a("code",[t._v("person")]),t._v("实例，访问"),a("code",[t._v("person.name")]),t._v("，神奇的事情发生了，它打印了"),a("code",[t._v("animal")]),t._v("的"),a("code",[t._v("name")]),t._v("属性值，其实这种现象就是"),a("strong",[t._v("继承")]),t._v("，"),a("code",[t._v("Person ()")]),t._v("继承了"),a("code",[t._v("Animal ()")]),t._v("的属性与方法。")]),t._v(" "),a("h3",{attrs:{id:"俯瞰原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#俯瞰原型链"}},[t._v("#")]),t._v(" 俯瞰原型链")]),t._v(" "),a("p",[t._v("我们在手动实现原型链只是原型链的一部分，背后还有JS的"),a("strong",[t._v("默认原型")]),t._v("，我们是无法直接观察到的，所以我们需要"),a("strong",[t._v("俯瞰")]),t._v("原型链来揭露原型链隐蔽的面纱。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("__proto__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Person")]),t._v("\n")])])]),a("p",[t._v("看上面的代码是不是很熟悉，在本文开头介绍原型的也举出了该例子，在我们眼里只有这个一组原型，但其实内部包括了默认原型，我们可以通过"),a("code",[t._v("__proto__")]),t._v("来访问到")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("__proto__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null")]),t._v("\n")])])]),a("p",[t._v("我们通过"),a("code",[t._v("__proto__")]),t._v("搭配"),a("code",[t._v("constructor")]),t._v("访问到了"),a("code",[t._v("Object")]),t._v("构造函数与"),a("code",[t._v("null")]),t._v("，其实这也是意味着原型链的顶层是"),a("code",[t._v("null")]),t._v("，已经到原型链的顶层了，下面我将这个关系构成了一张图片")]),t._v(" "),a("p",[t._v("不难看出原型链的本质就是各个原型通过"),a("code",[t._v("__proto__")]),t._v("相连而构成的链式结构")]),t._v(" "),a("h2",{attrs:{id:"总结一下✌️"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结一下✌️"}},[t._v("#")]),t._v(" 总结一下✌️")]),t._v(" "),a("blockquote",[a("p",[t._v("通过本文，我们学到了什么")])]),t._v(" "),a("ol",[a("li",[t._v("原型是什么")]),t._v(" "),a("li",[t._v("我们可以利用原型的三大特性做什么")]),t._v(" "),a("li",[t._v("原型模式与构造函数模式产生结果的差别")]),t._v(" "),a("li",[t._v("原型链实现的继承")])])])}),[],!1,null,null,null);s.default=e.exports}}]);
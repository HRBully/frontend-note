(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{633:function(t,s,a){"use strict";a.r(s);var n=a(17),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("在开发中我们常常会会遇到列表相关的场景，比如说：卡片列表，导航栏，而在实现上，有一个问题需要我们去注意："),a("strong",[t._v("如何给非首列表项赋予样式")]),t._v("，简单地来说就是一个列表中除第一个元素外其他元素赋予样式，比如："),a("strong",[t._v("我想给一个导航栏的第一个导航项在左边，其他在右边")]),t._v("，效果如下图片所示")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/hogB/Img/main/202208232122461.png",alt:"image-20220823212257399"}})]),t._v(" "),a("p",[t._v("这个时候可能有人会说这实习起来不是很简单吗，根据优先级，使用"),a("code",[t._v("id")]),t._v("选择器给第一个元素赋予右浮动，其他元素使用"),a("code",[t._v("class")]),t._v("选择器赋予左浮动不就行了吗？")]),t._v(" "),a("p",[t._v("nonono，使用"),a("code",[t._v("id")]),t._v("选择器赋予样式本身就是一种错误的选择，严重扰乱优先级。")]),t._v(" "),a("p",[t._v("这里我通过码上掘金给出导航栏的初始样式，导航项都在左侧，掘友可以通过下面地讲解来分别利用码上掘金来实验效果，下面开始我们的正题。")]),t._v(" "),a("h2",{attrs:{id:"伪类实现方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#伪类实现方案"}},[t._v("#")]),t._v(" 伪类实现方案")]),t._v(" "),a("p",[t._v("可以结合两种伪类来处理这个问题，拆解一下非首项，"),a("strong",[t._v("非")]),t._v("与"),a("strong",[t._v("首个")]),t._v("，那么肯定会联想到"),a("code",[t._v(":not()")]),t._v("与"),a("code",[t._v(":first")]),t._v("这两个伪类")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("li:not(:first-child)")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如上，我们选中了"),a("code",[t._v("li")]),t._v("元素，通过选定非首个元素的形式来选中非首项，除此之外我们还可以分开处理")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("li")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("li:first-child")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("为所有的"),a("code",[t._v("li")]),t._v("元素赋予左浮动，再通过后来居上的原则，为首个元素设置右浮动")]),t._v(" "),a("h2",{attrs:{id:"选择符实现方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择符实现方案"}},[t._v("#")]),t._v(" 选择符实现方案")]),t._v(" "),a("blockquote",[a("p",[t._v("选择符实现方法包含了两种，利用"),a("strong",[t._v("随后兄弟选择符")]),t._v("与"),a("strong",[t._v("相邻兄弟选择符")]),t._v("实现。")])]),t._v(" "),a("h3",{attrs:{id:"随后兄弟选择符实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#随后兄弟选择符实现"}},[t._v("#")]),t._v(" 随后兄弟选择符实现")]),t._v(" "),a("p",[t._v("随后兄弟选择符可以匹配某项后的所有兄弟元素，所以可以利用这个特性为首项后的样式赋予样式，给首个节点赋予一个"),a("code",[t._v("class")]),t._v("，通过"),a("code",[t._v("class")]),t._v("与兄弟属性结合使用，便成功实现。")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".active ~ li")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("下面再来看看另一个纯选择符实现——相邻兄弟选择符。")]),t._v(" "),a("h3",{attrs:{id:"相邻兄弟选择符实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相邻兄弟选择符实现"}},[t._v("#")]),t._v(" 相邻兄弟选择符实现")]),t._v(" "),a("p",[t._v("相邻兄弟选择符选中的是目标元素向后相邻的兄弟元素，所以只能选择一个元素，那么这里就会有人问：“只能选中相邻的一个元素的话，如何做到为非首项后面的所有元素添加样式呢？”")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("li + li")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("就如上面利用相邻兄弟选择器实现解释上面的疑问，其选中的是"),a("code",[t._v("li")]),t._v("元素的兄弟元素的第一个"),a("code",[t._v("li")]),t._v("元素，而除了首项外，其他所有的"),a("code",[t._v("li")]),t._v("元素都有前兄弟元素，所以就成功地实现了选中非首项元素。")]),t._v(" "),a("h2",{attrs:{id:"引发的思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引发的思考"}},[t._v("#")]),t._v(" 引发的思考")]),t._v(" "),a("blockquote",[a("p",[t._v("通过尝试上面这几种方法后肯定会发现一个问题，那就是元素顺序问题")])]),t._v(" "),a("p",[t._v("正常情况下遵循文档流，由左至右，而上面方法会引起最后呈现的元素顺序与文档流不一致，这也是由浮动的特性造成的，流的特性很神奇，所有我们可以利用流的特性与CSS结合出意想不到的效果，视觉上元素的顺序往往与文档流中的元素顺序不同，符合我们的开发规范和设计规范就好了。")]),t._v(" "),a("p",[t._v("​")])])}),[],!1,null,null,null);s.default=e.exports}}]);
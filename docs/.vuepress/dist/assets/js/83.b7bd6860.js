(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{699:function(s,t,a){"use strict";a.r(t);var n=a(17),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"问题🍵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题🍵"}},[s._v("#")]),s._v(" 问题🍵")]),s._v(" "),a("p",[s._v("Js初学者又或者开发者都会产生这么一个疑惑："),a("strong",[s._v("“我们声明的字符串变量为什么可以以类似对象的形式来调用方法，比如"),a("code",[s._v("str.toString()")]),s._v("”")]),s._v("，当然不只是字符串类型，还有"),a("strong",[s._v("布尔")]),s._v("，"),a("strong",[s._v("数值")]),s._v("类型，本文将带你了解这三种原始值的创建，背后发生了什么，为什么可以以对象形式来调用方法，又或者是属性。")]),s._v(" "),a("h2",{attrs:{id:"背后的类型😶‍🌫️"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#背后的类型😶‍🌫️"}},[s._v("#")]),s._v(" 背后的类型😶‍🌫️")]),s._v(" "),a("p",[a("strong",[s._v("字符串")]),s._v("，"),a("strong",[s._v("布尔")]),s._v("，"),a("strong",[s._v("数值")]),s._v("三者背后分别对应着三个原始值包装类型分别为**"),a("code",[s._v("String()")]),s._v("，"),a("code",[s._v("Boolean()")]),s._v("，"),a("code",[s._v("Number()")]),s._v("**，其本质为引用类型，而正是这三种引用类型在后面帮助我们的三种原始值，我们以字符串举例，来看看当我们创建一个原始值，后台都发生了什么事情。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"猪痞恶霸"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 痞恶霸")]),s._v("\n")])])]),a("p",[s._v("如上我们声明了一个"),a("code",[s._v("str_1")]),s._v("并为其赋值，其类型为字符串类型，然后再声明一个"),a("code",[s._v("str_2")]),s._v("变量并调用"),a("code",[s._v("str_1")]),s._v("的"),a("code",[s._v("substring")]),s._v("方法为其赋值，那么在其背后发生了什么")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"猪痞恶霸"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" str_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nstr_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("\n")])])]),a("p",[s._v("上面是其本质，解析一下这三行都做了什么")]),s._v(" "),a("ul",[a("li",[s._v("使用"),a("code",[s._v("String()")]),s._v("构造一个字符串实例")]),s._v(" "),a("li",[s._v("调用字符串实例方法为其赋值")]),s._v(" "),a("li",[s._v("完成使用后将"),a("code",[s._v("str_1")]),s._v("释放（未回收）")])]),s._v(" "),a("p",[s._v("如你所见，创建一个原始值是通过特定的引用类型构造一个实例，所以其能调用方法或者访问其属性（譬如"),a("code",[s._v("str_1.length")]),s._v("），那么我们可以为原始类型添加方法或者属性吗？")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"猪痞恶霸"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \nstr_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hogskin"')]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str_1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// undefined")]),s._v("\n")])])]),a("p",[s._v("到这里有人就疑问了，为啥捏。其实上面是隐式创建原始值，而当我们显式创建原始值的时候结果还是不同的。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"猪痞恶霸"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nstr_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hogskin"')]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// hogskin")]),s._v("\n")])])]),a("p",[s._v("使用"),a("code",[s._v("new String()")]),s._v("是显式创建方法，我们可以为其添加属性或者方法，短短的代码，大大的疑惑，我来解释一下为什么上面两个代码块产生不同的效果。")]),s._v(" "),a("p",[s._v("其实上面会出现这种情况完全由显示创建和隐式创建给实例带来不同的"),a("strong",[s._v("生命周期")]),s._v("造成的")]),s._v(" "),a("ul",[a("li",[s._v("显式创建：通过"),a("code",[s._v("new")]),s._v("引用类型构造实例，它的会存在与当前作用域之内，离开即销毁。")]),s._v(" "),a("li",[s._v("隐式创建：通过直接创建引用类型，它存在于涉及到它的代码执行调用阶段。")])]),s._v(" "),a("p",[s._v("显而易见，隐式创建的生命周期导致了无法为其添加属性或者方法。")]),s._v(" "),a("h2",{attrs:{id:"隐式还是显式创建❔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐式还是显式创建❔"}},[s._v("#")]),s._v(" 隐式还是显式创建❔")]),s._v(" "),a("p",[s._v("又有掘友可能会问："),a("strong",[s._v("我们推荐使用显式创建还是隐式创建呢？")])]),s._v(" "),a("p",[s._v("这个问题问得好！我们下面拿布尔类型举例来看看显示创建和隐式创建的会带来什么结果")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" f_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("f_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" f_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("f_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])])]),a("p",[s._v("为什么会产生这种现象呢，因为"),a("code",[s._v("f_1")]),s._v("是显式创建，创建的实例，默认处理为"),a("code",[s._v("true")]),s._v("，就会导致最后意想不到的结果，所以我们更推荐也是更常用的是显式创建，其他两种类型也会因为创建方式而收到影响，最显著的影响就是类型")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" num_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// object")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typeof")]),s._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// number")]),s._v("\n")])])]),a("h2",{attrs:{id:"最后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[s._v("#")]),s._v(" 最后")]),s._v(" "),a("p",[s._v("我们已经了解了三种原始类型的创建在背后会发生什么，也掌握了其不同创建方式会带来的影响，其实我们身为前端工程师更应该了解Js背后的事情，能让我更好地去理解，应用。")])])}),[],!1,null,null,null);t.default=e.exports}}]);
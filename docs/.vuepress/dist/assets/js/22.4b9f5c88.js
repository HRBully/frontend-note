(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{577:function(t,s,a){t.exports=a.p+"assets/img/image-20220324160859377.b94d944f.png"},578:function(t,s,a){t.exports=a.p+"assets/img/image-20220325221010293.233c9e87.png"},708:function(t,s,a){"use strict";a.r(s);var r=a(17),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[t._v("#")]),t._v(" 类型")]),t._v(" "),r("h2",{attrs:{id:"类型声明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类型声明"}},[t._v("#")]),t._v(" 类型声明")]),t._v(" "),r("h3",{attrs:{id:"声明语法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#声明语法"}},[t._v("#")]),t._v(" 声明语法")]),t._v(" "),r("p",[t._v("我们声明了一个变量a并指定为number类型，在以后的使用过程中a的值只能是数字类型，我们也可以之间赋值，ts会自动判断。")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n")])])]),r("h3",{attrs:{id:"参数声明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参数声明"}},[t._v("#")]),t._v(" 参数声明")]),t._v(" "),r("p",[t._v("而我们的类型声明也可以在函数参数上声明，当调用函数传参的时候，参数类型会被限制。")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token parameter"}},[r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("number")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("p",[r("img",{attrs:{src:a(577),alt:"image-20220324160859377"}})]),t._v(" "),r("h3",{attrs:{id:"返回值声明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#返回值声明"}},[t._v("#")]),t._v(" 返回值声明")]),t._v(" "),r("p",[t._v("除了参数包含类型声明，返回值也有类型声明，如下返回值为number")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token parameter"}},[r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("number"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("number")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("number "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("h3",{attrs:{id:"字面量声明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字面量声明"}},[t._v("#")]),t._v(" 字面量声明")]),t._v(" "),r("p",[t._v("除此之外我们还可以进行字面量的声明")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mae"')]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"red"')]),t._v("a\na "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"res"')]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里a只能被赋值为mad和red")]),t._v("\n")])])]),r("h2",{attrs:{id:"类型种类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类型种类"}},[t._v("#")]),t._v(" 类型种类")]),t._v(" "),r("h3",{attrs:{id:"任意类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#任意类型"}},[t._v("#")]),t._v(" 任意类型")]),t._v(" "),r("p",[t._v("一个变量可以设置any表示为任意类型，这代表着设置之后关闭了ts的类型检测，爱咋咋地。")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("a")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("any\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("b")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("any\na "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),t._v("\na "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nb "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),t._v("\n")])])]),r("p",[t._v("当然我们如果不声明任何类型的时候，这种情况为隐式any，声明后的情况为显式any。")]),t._v(" "),r("h3",{attrs:{id:"未知类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#未知类型"}},[t._v("#")]),t._v(" 未知类型")]),t._v(" "),r("p",[t._v("为变量声明unknown类型的效果和声明any相似")]),t._v(" "),r("div",{staticClass:"language-typescript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-typescript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("unknown")]),t._v("\n")])])]),r("p",[t._v("那我们为什么提倡使用unknown呢？原因如下")]),t._v(" "),r("div",{staticClass:"language-typescript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-typescript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),t._v("\nb "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"str"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\na "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 不会有任何的错误提示")]),t._v("\n")])])]),r("p",[t._v("any可以赋值给任意变量不抛错，霍霍自己的同时也影响别人，即关闭了其他变量的类型检查")]),t._v(" "),r("p",[t._v("unknown不同")]),t._v(" "),r("div",{staticClass:"language-typescript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-typescript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" e"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("unknown")]),t._v("\ne "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"str"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\ns "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 抛错")]),t._v("\n")])])]),r("p",[t._v("即使被unknown声明的变量的赋值类型与被赋值变量声明的类型相同，也会抛错")]),t._v(" "),r("p",[r("img",{attrs:{src:a(578),alt:"image-20220325221010293"}})]),t._v(" "),r("p",[t._v("总结来看unknown是一个类型安全的any")]),t._v(" "),r("h3",{attrs:{id:"空值与无值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#空值与无值"}},[t._v("#")]),t._v(" 空值与无值")]),t._v(" "),r("h4",{attrs:{id:"空置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#空置"}},[t._v("#")]),t._v(" 空置")]),t._v(" "),r("p",[t._v("void：当我们函数返回值没有声明类型的时候默认为void，所以当我们的函数没有返回值i的时候可以添加void类型")]),t._v(" "),r("div",{staticClass:"language-typescript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-typescript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("h4",{attrs:{id:"无值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#无值"}},[t._v("#")]),t._v(" 无值")]),t._v(" "),r("p",[t._v("never：表示永远不会返回结果，但是和空不同，空即是色色即是空，空也是一种有（哲学），never才是真正的虚无。我们可以如下这么用。")]),t._v(" "),r("div",{staticClass:"language-typescript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-typescript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("never")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"报错！！！"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("h2",{attrs:{id:"类型断言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[t._v("#")]),t._v(" 类型断言")]),t._v(" "),r("p",[t._v("有时候编译器不知道某个变量的类型，但是我们知道，所以我们可以通过使用类型断言来让编译器知道某个变量是什么类型。")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("e")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("unknown\ne "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"str"')]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("s")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("string\ns "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" string\n")])])]),r("p",[t._v("语法如下")]),t._v(" "),r("div",{staticClass:"language-typescript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-typescript"}},[r("code",[t._v("s "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\ns "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("e\n")])])]),r("h2",{attrs:{id:"复杂类型的声明限制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#复杂类型的声明限制"}},[t._v("#")]),t._v(" 复杂类型的声明限制")]),t._v(" "),r("h3",{attrs:{id:"对象类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对象类型"}},[t._v("#")]),t._v(" 对象类型")]),t._v(" "),r("p",[t._v("当我们想用ts来声明一个对象的时候，不能单纯地声明一个"),r("code",[t._v("let b = {}")]),t._v("JS是万物皆对象的，所以说我们需要一种严格的限制不能单纯地定义对象这一类型")]),t._v(" "),r("div",{staticClass:"language-typescript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-typescript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cxy'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("p",[t._v("这种声明是非常严格的，键值对只能是我们声明的形式，无论是多还是少都会抛错")]),t._v(" "),r("p",[t._v("当然我们还可以为声明时的键值对添加？来表达这个键值对赋值的时候是可有可无的")]),t._v(" "),r("div",{staticClass:"language-typescript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-typescript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nobj "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cxy'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("p",[t._v("那么我们只有一个必要项，其他很多的键值为可选项目我们还可以通过"),r("code",[t._v("[proName:string]:any")]),t._v("这里的含有就是表示任意类型的任意类型的任意属性名。")]),t._v(" "),r("div",{staticClass:"language-typescript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-typescript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("proName"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("h3",{attrs:{id:"函数类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数类型"}},[t._v("#")]),t._v(" 函数类型")]),t._v(" "),r("p",[t._v("我们可以通过箭头函数的声明形式来限制")]),t._v(" "),r("div",{staticClass:"language-typescript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-typescript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fn")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fn")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n1"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("n2"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n1"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("n2\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("p",[t._v("那么函数参数的扩展性还需要我们去解决")]),t._v(" "),r("h3",{attrs:{id:"数组类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数组类型"}},[t._v("#")]),t._v(" 数组类型")]),t._v(" "),r("p",[t._v("我们还为数组声明一个限制，原来的js对于数组内存储的类型是没有限制的，一个数组可以存储不同类型的值，我们可以通过数组的声明改变这个现况")]),t._v(" "),r("div",{staticClass:"language-typescript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-typescript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),r("h2",{attrs:{id:"扩展类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#扩展类型"}},[t._v("#")]),t._v(" 扩展类型")]),t._v(" "),r("h3",{attrs:{id:"元组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#元组"}},[t._v("#")]),t._v(" 元组")]),t._v(" "),r("p",[t._v("元组是ts新增一个概念，大概就是固定长度的数组，下面声明的元组可以理解为只能存放两个字符串的数组")]),t._v(" "),r("div",{staticClass:"language-typescript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-typescript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" h"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),r("h3",{attrs:{id:"枚举"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),r("p",[t._v("在处理数据的时候需要进行一个标识，这个标识就是枚举")]),t._v(" "),r("div",{staticClass:"language-typescript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-typescript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" Gender "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Male"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Female"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("gender"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Gender"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nobj "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cxy"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    gender"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Gender"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Male "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("h2",{attrs:{id:"类型别名"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类型别名"}},[t._v("#")]),t._v(" 类型别名")]),t._v(" "),r("p",[t._v("在我们要多次调用同一个自定义类型的时候我们可以为这个自定义类型起一个别名")]),t._v(" "),r("div",{staticClass:"language-typescript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-typescript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("numberone")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" numberone\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num_2 "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" numberone\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);